#!/usr/bin/env node

require('coffee-script');

var program = require('commander');
var fs = require('fs');
var path = require('path');
var resolve = path.resolve;
var exists = fs.existsSync || path.existsSync;
var join = path.join;
var basename = path.basename;
var cwd = process.cwd();
var compilers = {};

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .option('-r, --require <name>', 'require the given module')
  .option('-R, --reporter <name>', 'specify the reporter to use', 'dot')
  .option('-u, --ui <name>', 'specify user-interface (bdd|tdd|exports)', 'bdd')
  .option('-b, --bail', "bail after first test failure")
  .option('-h, --headless', "run headless with phantomjs")
  .option('-c, --compiler <name>', "pass in [ext]:[path to compiler]")
  .option('--ignore-leaks', 'ignore global variable leaks')
  .option('--recursive', 'include sub directories');

var requires = []

program.on('require', function(mod){
  requires.push(mod);
});

program.on('compiler', function(extAndCompiler){
  var s = extAndCompiler.split(':');
  if (s.length !== 2) {
    console.error("Option error: compiler must use [ext]:[path to compiler] format");
    process.exit(1);
  }
  compilers[s[0]] = s[1]
});

try {
  var opts = fs.readFileSync('test/mocha-server.opts', 'utf8')
    .trim()
    .split(/\s+/);

  process.argv = process.argv
    .slice(0, 2)
    .concat(opts.concat(process.argv.slice(2)));
} catch (err) {
  // ignore
}

program.parse(process.argv);

var args = program.args;
if (!args.length) args.push('test');

// Args parsed... launch mocha server.
var MochaServer = require('../lib/mocha-server');
var mochaServer = new MochaServer({
  requirePaths: requires,
  testPaths: args,
  recursive: program.recursive,
  ui: program.ui,
  bail: program.bail,
  ignoreLeaks: program.ignoreLeaks,
  headless: program.headless,
  reporter: program.reporter,
  compilers: compilers
});
mochaServer.launch();

